from fastapi import APIRouter, Depends, HTTPException
from sqlalchemy.orm import Session
from app.core.base_datos import obtener_bd
from app.servicios.configuracion_escaneos_servicio import (
    crear_configuracion_escaneo, obtener_configuracion_escaneo,
    actualizar_configuracion_escaneo, listar_configuraciones_escaneo,
    eliminar_configuracion_escaneo, activar_configuracion_escaneo, listar_configuraciones_frecuencia,
    listar_configuraciones_horas
)
from app.esquemas.configuracion_escaneos_esquemas import (
    ConfiguracionEscaneoCrear, ConfiguracionEscaneoActualizar, ConfiguracionEscaneoActualizarEstado
)
from app.transacciones.transaccion_configuracion_escaneos import crear_configuracion_escaneo_con_horas
router = APIRouter(
    prefix="/configuracion_escaneos",
    tags=["Configuraci√≥n de Escaneos"]
)

## ‚úÖ 1Ô∏è‚É£ CREAR UNA NUEVA CONFIGURACI√ìN DE ESCANEO
@router.post("/crear_configuracion_escaneo")
def crear_configuracion_escaneo_endpoint(
    datos: dict,  # üîπ Recibir como dict para extraer manualmente
    db: Session = Depends(obtener_bd)
):
    try:
        # üîπ Extraer horas si existen
        horas = datos.pop("horas", [])  

        # üîπ Convertir los datos a Pydantic sin incluir `horas`
        config_datos = ConfiguracionEscaneoCrear(**datos)

        if config_datos.tipo_escaneo_id == 1:
            # üîπ Guardar configuraci√≥n de frecuencia
            resultado = crear_configuracion_escaneo(config_datos, db)
        elif config_datos.tipo_escaneo_id == 2:
            # üîπ Guardar configuraci√≥n con horas
            resultado = crear_configuracion_escaneo_con_horas(config_datos, horas, db)
        else:
            raise HTTPException(status_code=400, detail="Tipo de escaneo no v√°lido")

        return {"mensaje": "Configuraci√≥n creada exitosamente", "data": resultado}

    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Error al crear la configuraci√≥n: {str(e)}")

## ‚úÖ 2Ô∏è‚É£ OBTENER UNA CONFIGURACI√ìN DE ESCANEO POR ID
@router.get("/obtener_configuracion_escaneo/{configuracion_id}")
def obtener_configuracion_escaneo_endpoint(configuracion_id: int, db: Session = Depends(obtener_bd)):
    resultado = obtener_configuracion_escaneo(configuracion_id, db)
    return {"mensaje": "Configuraci√≥n de escaneo obtenida exitosamente", "data": resultado}

## ‚úÖ 3Ô∏è‚É£ ACTUALIZAR UNA CONFIGURACI√ìN DE ESCANEO
@router.put("/actualizar_configuracion_escaneo/{configuracion_id}")
def actualizar_configuracion_escaneo_endpoint(configuracion_id: int, datos: ConfiguracionEscaneoActualizar, db: Session = Depends(obtener_bd)):
    resultado = actualizar_configuracion_escaneo(configuracion_id, datos, db)
    return {"mensaje": "Configuraci√≥n de escaneo actualizada exitosamente", "data": resultado}

## ‚úÖ 4Ô∏è‚É£ ACTIVAR UNA CONFIGURACI√ìN DE ESCANEO
@router.put("/activar_configuracion/{configuracion_id}")
def activar_configuracion_endpoint(configuracion_id: int, db: Session = Depends(obtener_bd)):
    resultado = activar_configuracion_escaneo(configuracion_id, db)
    return {"mensaje": "Configuraci√≥n de escaneo activada exitosamente", "data": resultado}

## ‚úÖ 5Ô∏è‚É£ LISTAR TODAS LAS CONFIGURACIONES
@router.get("/listar_configuraciones_escaneo")
def listar_configuraciones_escaneo_endpoint(db: Session = Depends(obtener_bd)):
    resultado = listar_configuraciones_escaneo(db)
    return {"mensaje": "Lista de configuraciones de escaneo obtenida exitosamente", "data": resultado}

## ‚úÖ 6Ô∏è‚É£ ELIMINAR UNA CONFIGURACI√ìN DE ESCANEO
@router.delete("/eliminar_configuracion_escaneo/{configuracion_id}")
def eliminar_configuracion_escaneo_endpoint(configuracion_id: int, db: Session = Depends(obtener_bd)):
    resultado = eliminar_configuracion_escaneo(configuracion_id, db)
    return {"mensaje": "Configuraci√≥n de escaneo eliminada exitosamente"}

## ‚úÖ 1Ô∏è‚É£ LISTAR CONFIGURACIONES DE FRECUENCIA
@router.get("/listar_configuraciones_frecuencia")
def listar_configuraciones_frecuencia_endpoint(db: Session = Depends(obtener_bd)):
    resultado = listar_configuraciones_frecuencia(db)
    return {"mensaje": "Lista de configuraciones de escaneo por frecuencia obtenida exitosamente", "data": resultado}

## ‚úÖ 2Ô∏è‚É£ LISTAR CONFIGURACIONES POR HORAS
@router.get("/listar_configuraciones_horas")
def listar_configuraciones_horas_endpoint(db: Session = Depends(obtener_bd)):
    resultado = listar_configuraciones_horas(db)
    return {"mensaje": "Lista de configuraciones de escaneo por horas obtenida exitosamente", "data": resultado}

